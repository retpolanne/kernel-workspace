From 0aab52cc733de8ddde96d439766378b3e3e93b8d Mon Sep 17 00:00:00 2001
From: Anne Macedo <retpolanne@posteo.net>
Date: Mon, 19 Jun 2023 16:06:12 -0300
Subject: [PATCH] usb: host: xhci: add option to erase renesas rom

Signed-off-by: Anne Macedo <retpolanne@posteo.net>
---
 drivers/usb/host/xhci-pci-renesas.c | 38 +++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

diff --git a/drivers/usb/host/xhci-pci-renesas.c b/drivers/usb/host/xhci-pci-renesas.c
index 93f8b355bc70..c6fd05de6098 100644
--- a/drivers/usb/host/xhci-pci-renesas.c
+++ b/drivers/usb/host/xhci-pci-renesas.c
@@ -1,12 +1,14 @@
 // SPDX-License-Identifier: GPL-2.0
 /* Copyright (C) 2019-2020 Linaro Limited */
 
+#define DEBUG 1
 #include <linux/acpi.h>
 #include <linux/firmware.h>
 #include <linux/module.h>
 #include <linux/pci.h>
 #include <linux/slab.h>
 #include <asm/unaligned.h>
+#include <linux/debugfs.h>
 
 #include "xhci.h"
 #include "xhci-trace.h"
@@ -50,6 +52,11 @@
 #define RENESAS_RETRY	10000
 #define RENESAS_DELAY	10
 
+static void debugfs_init(struct pci_dev *pdev);
+static void debugfs_exit(void);
+static struct dentry *debugfs_root;
+
+
 static int renesas_fw_download_image(struct pci_dev *dev,
 				     const u32 *fw, size_t step, bool rom)
 {
@@ -200,9 +207,11 @@ static int renesas_check_rom_state(struct pci_dev *pdev)
 		/* Check the "Result Code" Bits (6:4) and act accordingly */
 		switch (rom_state & RENESAS_ROM_STATUS_RESULT) {
 		case RENESAS_ROM_STATUS_SUCCESS:
+			debugfs_init(pdev);
 			return 0;
 
 		case RENESAS_ROM_STATUS_NO_RESULT: /* No result yet */
+			debugfs_init(pdev);
 			dev_dbg(&pdev->dev, "Unknown ROM status ...\n");
 			return -ENOENT;
 
@@ -421,6 +430,34 @@ static void renesas_rom_erase(struct pci_dev *pdev)
 	dev_dbg(&pdev->dev, "ROM Erase... Done success\n");
 }
 
+static int debugfs_rom_erase(void *data, u64 value)
+{
+	struct pci_dev *pdev = data;
+
+	if (value == 1) {
+		dev_dbg(&pdev->dev, "Userspace requested ROM erase\n");
+		renesas_rom_erase(pdev);
+		return 0;
+	}
+	return -EINVAL;
+}
+
+DEFINE_DEBUGFS_ATTRIBUTE(rom_erase_ops, NULL, debugfs_rom_erase, "%llu\n");
+
+static void debugfs_init(struct pci_dev *pdev)
+{
+	debugfs_root = debugfs_create_dir("renesas_usb", NULL);
+
+	debugfs_create_file("rom_erase", 0200, debugfs_root,
+			    pdev, &rom_erase_ops);
+}
+
+static void debugfs_exit(void)
+{
+	debugfs_remove_recursive(debugfs_root);
+}
+
+
 static bool renesas_setup_rom(struct pci_dev *pdev, const struct firmware *fw)
 {
 	const u32 *fw_data = (const u32 *)fw->data;
@@ -626,5 +663,6 @@ int renesas_xhci_check_request_fw(struct pci_dev *pdev,
 	return err;
 }
 EXPORT_SYMBOL_GPL(renesas_xhci_check_request_fw);
+module_exit(debugfs_exit);
 
 MODULE_LICENSE("GPL v2");
-- 
2.41.0
